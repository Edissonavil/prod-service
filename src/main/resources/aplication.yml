spring:
  application:
    name: aec-prod # Nombre de la aplicación, generalmente se usa el nombre del servicio
  docker:
    compose:
      enabled: false # Deshabilita la integración con Docker Compose
  cloud:
    compatibility-verifier:
      enabled: false # Deshabilita el verificador de compatibilidad de Spring Cloud
  servlet:
    multipart:
      max-file-size: 200MB # Tamaño máximo de archivo para subidas
      max-request-size: 200MB # Tamaño máximo de la solicitud para subidas

  # Configuración de la base de datos
  datasource:
    url: ${DATASOURCE_URL} # ¡SIN valor por defecto para seguridad!
    username: ${DATASOURCE_USER} # ¡SIN valor por defecto para seguridad!
    password: ${DATASOURCE_PASS} # ¡SIN valor por defecto para seguridad!
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update} # 'update' es un buen valor por defecto para desarrollo.
                                    # Asegúrate de usar 'validate' o 'none' en producción.

server:
  port: ${SERVER_PORT:8083} # Puerto por defecto para desarrollo, Railway usará su propio puerto

jwt:
  secret: ${JWT_SECRET} # ¡CRÍTICO! SIN valor por defecto para seguridad
  accessMs: ${JWT_ACCESS_MS:3600000} # Las duraciones pueden tener valores por defecto
  refreshMs: ${JWT_REFRESH_MS:86400000} # Las duraciones pueden tener valores por defecto

file-service:
  base-url: ${FILE_SERVICE_BASE_URL:http://localhost:8084} # URL base del servicio de archivos

users:
  service:
    url: ${USERS_SERVICE_URL:http://localhost:8081/api/users} # URL base del servicio de usuarios

file:
  upload-dir: ${UPLOAD_DIR:/tmp/aec_uploads} # Ruta de directorio, ¡cambiada a una ruta más genérica para entornos de nube!
                                              # En Railway, considera usar un volumen persistente para datos reales.

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
